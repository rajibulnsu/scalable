{"version":3,"sources":["components/Menu/Menu.styles.js","components/Menu/Menu.js","components/RiskLevelSelector/RiskLevelSelector.styles.js","components/RiskLevelSelector/Risk-level-selector.js","components/InvestmentInput/InvestmentInput.styles.js","components/InvestmentInput/InvestmentInput.js","utils/mapDate.js","utils/calculateTimeSeries.js","hooks/useTimeSeries.js","components/Table/Table.js","screens/TableScreen.js","screens/ChartScreen.js","helpers/fetchData.js","common/constants.js","app.js","index.js"],"names":["styles","menu","padding","display","paragraph","margin","Menu","style","Link","className","to","divStyle","maxWidth","RiskLevelSelector","props","minRiskLevel","maxRiskLevel","defaultRiskLevel","onChangeRiskLevel","options","k","push","key","value","onChange","event","riskLevel","parseInt","target","defaultValue","id","defaultProps","investmentInputContainer","width","InvestmentInput","defaultInvestment","onChangeInitialInvestment","type","investmentAmount","mapDate","t","mu","sigma","fee","initialSum","monthlySum","yearlyReturn","monthlyReturn","month","median","Math","exp","floor","upper95","log","sqrt","lower05","calculateTimeSeries","years","series","l","allSeries","length","y","x","useTimeSeries","cones","filter","cone","timeSeries","months","map","v","idx","labels","dataGood","dataMedian","dataBad","Table","tableColumns","tableRows","tableHeader","React","createElement","item","propTypes","PropTypes","number","array","TableScreen","entry","index","ChartScreen","this","drawChart","config","data","datasets","label","borderColor","fill","pointRadius","responsive","scales","xAxes","scaleLabel","labelString","gridLines","drawOnChartArea","yAxes","context","canvas","getContext","ChartJs","ref","height","Component","fetchData","a","responseData","jsonData","fetch","response","json","App","state","bind","setState","Route","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"20CAUeA,EAVA,CACbC,KAAM,CACJC,QAAS,OACTC,QAAS,eAEXC,UAAW,CACTC,OAAQ,QCMGC,EAPF,kBACT,yBAAKC,MAAOP,EAAOC,MACf,uBAAGM,MAAOP,EAAOI,WAAW,kBAACI,EAAA,EAAD,CAAMC,UAAU,oBAAoBC,GAAG,UAAvC,UAC5B,uBAAGH,MAAOP,EAAOI,WAAW,kBAACI,EAAA,EAAD,CAAMC,UAAU,oBAAoBC,GAAG,UAAvC,YCDrBV,EAPA,CACbW,SAAU,CACRC,SAAU,QACVV,QAAS,SCCPW,EAAoB,SAACC,GAUvB,IAVkC,IAC1BC,EAAmED,EAAnEC,aAAcC,EAAqDF,EAArDE,aAAcC,EAAuCH,EAAvCG,iBAAkBC,EAAqBJ,EAArBI,kBAQhDC,EAAU,GACPC,EAAIL,EAAcK,GAAGJ,IAAgBI,EAC9CD,EAAQE,KACJ,4BAAQC,IAAKF,EAAGG,MAAOH,GAAIA,IAI/B,OACI,yBAAKb,MAAOP,EAAOW,UACf,8CACA,4BACIF,UAAU,eACVe,SAlBa,SAACC,GACtB,IAAIC,EAAYC,SAASF,EAAMG,OAAOL,MAAO,IAE7CL,EAAkBQ,IAgBVG,aAAcZ,EACda,GAAG,gBAEFX,KAMjBN,EAAkBkB,aAAe,CAC7BhB,aAAc,EACdC,aAAc,GACdC,iBAAkB,EAClBC,kBAAmB,cAURL,QC1CAb,EAPA,CACbgC,yBAA0B,CACxB9B,QAAS,OACT+B,MAAO,UCELC,EAAkB,SAACpB,GAAW,IAC1BqB,EAAiDrB,EAAjDqB,kBAAmBC,EAA8BtB,EAA9BsB,0BAQ3B,OACE,yBAAK7B,MAAOP,EAAOgC,0BACjB,sDACA,2BAAOK,KAAK,SAASd,MAAOY,EAAmB1B,UAAU,eAAee,SATnD,SAACC,GACxB,IAAIa,EAAmBX,SAASF,EAAMG,OAAOL,MAAO,IAEpDa,EAA0BE,QAW9BJ,EAAgBH,aAAe,CAC7BI,kBAAmB,IACnBC,0BAA2B,cAQdF,Q,gBClBAK,MAdf,YAAiE,IAA9CC,EAA6C,EAA7CA,EAAGC,EAA0C,EAA1CA,GAAIC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC1CC,EAAeL,EAAKE,EACpBI,EAAgBD,EAAe,GAC/BE,EAAY,GAAJR,EAERS,EAASL,EAAaM,KAAKC,IAAIL,EAAeN,GAAKK,EAAaK,KAAKC,IAAIJ,GAAiBC,EAAQE,KAAKE,MAAMJ,MAAYE,KAAKC,IAAIJ,EAAgBG,KAAKE,MAAMJ,IAAU,IAAQE,KAAKC,IAAIJ,GAAiB,GAE7M,MAAO,CACHE,OAAQA,EACRI,QAASH,KAAKC,IAAID,KAAKI,IAAIL,GAAUC,KAAKK,KAAKf,GAAKE,EAAQ,OAC5Dc,QAASN,KAAKC,IAAID,KAAKI,IAAIL,GAAUC,KAAKK,KAAKf,GAAKE,EAAQ,SCcrDe,EAtBa,SAAC,GAG3B,IAHkF,IAArDC,EAAoD,EAApDA,MAAOjB,EAA6C,EAA7CA,GAAIC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAE5Dc,EAAS,GACJC,EAAI,EAAGA,GAAK,GAAKF,IAASE,EACjCD,EAAOtC,KAAKkB,EAAQ,CAAEC,EAAGoB,EAAI,GAAInB,KAAIC,QAAOC,MAAKC,aAAYC,gBAS/D,IANA,IAAIgB,EAAY,CACdZ,OAAQ,GACRI,QAAS,GACTG,QAAS,IAGFpC,EAAI,EAAGA,EAAIuC,EAAOG,OAAQ1C,IACjCyC,EAAUZ,OAAO5B,KAAK,CAAE0C,EAAGJ,EAAOvC,GAAG6B,OAAQe,EAAGL,EAAOvC,GAAG4C,IAC1DH,EAAUR,QAAQhC,KAAK,CAAE0C,EAAGJ,EAAOvC,GAAGiC,QAASW,EAAGL,EAAOvC,GAAG4C,IAC5DH,EAAUL,QAAQnC,KAAK,CAAE0C,EAAGJ,EAAOvC,GAAGoC,QAASQ,EAAGL,EAAOvC,GAAG4C,IAG9D,OAAOH,GCSMI,EA5BO,SAACvC,EAAWkB,EAAYsB,GAAW,IAAD,EAChCA,EAAMJ,OAAS,GAAKI,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAK1C,YAAcA,KAAW,GAArFe,EAD8C,EAC9CA,GAAIC,EAD0C,EAC1CA,MAGN2B,EAAaZ,EAAoB,CACrChB,KACAC,QACAgB,MAAO,GACPd,aACAC,WAAY,IACZF,IARU,MAiBZ,MAAO,CACL2B,OAPaD,EAAWpB,OAAOsB,KAAI,SAACC,EAAGC,GAAJ,OAAYA,KAQ/CC,OAPaL,EAAWpB,OAAOsB,KAAI,SAACC,EAAGC,GAAJ,OAAYA,EAAM,KAAO,EAAIA,EAAM,GAAK,MAQ3EE,SAPaN,EAAWhB,QAAQkB,KAAI,SAAAC,GAAC,OAAIA,EAAET,KAQ3Ca,WAPeP,EAAWpB,OAAOsB,KAAI,SAAAC,GAAC,OAAIA,EAAET,KAQ5Cc,QAPcR,EAAWb,QAAQe,KAAI,SAAAC,GAAC,OAAIA,EAAET,OChB1Ce,EAAQ,SAAChE,GAAW,IAChBiE,EAA2BjE,EAA3BiE,aAAcC,EAAalE,EAAbkE,UAElBC,EAAcC,IAAMC,cAAc,KAAM,GAC1CJ,EAAaR,KACX,SAAAa,GAAI,OAAIF,IAAMC,cAAc,KAAM,CAAE7D,IAAK8D,GAAQA,OAIrD,OACE,2BAAO3E,UAAU,uBACf,+BACGwE,GAEH,+BACGD,KAMTF,EAAM/C,aAAe,CACnBgD,aAAc,GACdC,UAAW,IASEF,QCbfA,EAAM/C,aAAe,CACjBL,UAAW,EACXkB,WAAY,IACZsB,MAAO,IAGXY,EAAMO,UAAY,CACd3D,UAAW4D,IAAUC,OACrB3C,WAAY0C,IAAUC,OACtBrB,MAAOoB,IAAUE,OAGNC,MA7BK,SAAC3E,GAAW,IACrBY,EAAgCZ,EAAhCY,UAAWkB,EAAqB9B,EAArB8B,WAAYsB,EAASpD,EAAToD,MADH,EAEuBD,EAAcvC,EAAWkB,EAAYsB,GAA/EI,EAFmB,EAEnBA,OAAQK,EAFW,EAEXA,SAAUC,EAFC,EAEDA,WAAYC,EAFX,EAEWA,QAGhCG,EAAYV,GAAUA,EAAOC,KAAI,SAACmB,EAAOC,GAAR,OACnC,wBAAIrE,IAAKqE,GACL,4BAAKD,GACL,4BAAKf,EAASgB,IACd,4BAAKf,EAAWe,IAChB,4BAAKd,EAAQc,QAIrB,OAAO,kBAAC,EAAD,CAAOZ,aAVO,CAAC,QAAS,OAAQ,SAAU,OAUPC,UAAWd,EAAMJ,OAAS,GAAKkB,K,QCoE9DY,E,kLAjFPC,KAAKC,c,kCAGI,IAAD,EACgCD,KAAK/E,MAArCY,EADA,EACAA,UAAWkB,EADX,EACWA,WAAYsB,EADvB,EACuBA,MADvB,EAE0CD,EAAcvC,EAAWkB,EAAYsB,GAA/EQ,EAFA,EAEAA,OAAQG,EAFR,EAEQA,QAASD,EAFjB,EAEiBA,WAoDnBmB,EAAS,CACX1D,KAAM,OACN2D,KApDS,CACTC,SAAU,CACN,CACID,KAPJ,EAE6BrB,SAMzBuB,MAAO,mBACPC,YAAa,2BACbC,MAAM,EACNC,YAAa,GAEjB,CACIL,KAAMpB,EACNsB,MAAO,qBACPC,YAAa,2BACbC,MAAM,EACNC,YAAa,GAEjB,CACIL,KAAMnB,EACNqB,MAAO,kBACPC,YAAa,2BACbC,MAAM,EACNC,YAAa,IAGrB3B,UA6BAvD,QA1BY,CACZmF,YAAY,EACZC,OAAQ,CACJC,MAAO,CAAC,CACJrG,SAAS,EACTsG,WAAY,CACRtG,SAAS,EACTuG,YAAa,SAEjBC,UAAW,CACPC,iBAAiB,KAGzBC,MAAO,CAAC,CACJ1G,SAAS,EACTsG,WAAY,CACRtG,SAAS,EACTuG,YAAa,wBAavBI,EADSjB,KAAKkB,OACGC,WAAW,MAClC,IAAIC,QAAQH,EAASf,K,+BAGf,IAAD,OACL,OACI,6BACI,4BACImB,IAAK,SAAAA,GAAG,OAAI,EAAKH,OAASG,GAC1BjF,MAAO,IACPkF,OAAQ,W,GA5EFjC,IAAMkC,W,QCYjBC,EAbA,uCAAG,8BAAAC,EAAA,wDAIdC,EAAeC,EAASxB,KAJV,uCAMSyB,MCRH,IDEN,cAMRC,EANQ,gBAOOA,EAASC,OAPhB,OAOdJ,EAPc,wCAUTA,GAVS,4CAAH,qDEMMK,E,kDACjB,WAAY9G,GAAQ,IAAD,8BACf,cAAMA,IACD+G,MAAQ,CACTnG,UAAW,EACXkB,WAAY,IACZsB,MAAO,IAEX,EAAKhD,kBAAoB,EAAKA,kBAAkB4G,KAAvB,gBACzB,EAAK1F,0BAA4B,EAAKA,0BAA0B0F,KAA/B,gBARlB,E,gMAYKT,I,OAAdnD,E,OACN2B,KAAKkC,SAAS,CAAC7D,U,8IAGDxC,GACdmE,KAAKkC,SAAS,CAACrG,gB,gDAGOkB,GACtBA,EAAa,GAAKiD,KAAKkC,SAAS,CAAEnF,iB,+BAG5B,IAAD,EACmCiD,KAAKgC,MAArCnG,EADH,EACGA,UAAWkB,EADd,EACcA,WAAYsB,EAD1B,EAC0BA,MAC/B,OACI,kBAAC,IAAD,KACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAiB9B,0BAA2ByD,KAAKzD,0BAA2BD,kBAAmBS,IAC/F,kBAAC,EAAD,CAAmB1B,kBAAmB2E,KAAK3E,kBAAmBD,iBAAkBS,IAChF,kBAACsG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAAC,EAAD,CAAazG,UAAWA,EAAWkB,WAAYA,EAAYsB,MAAOA,OACzG,kBAAC8D,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAW,kBAAM,kBAAC,EAAD,CAAazG,UAAWA,EAAWkB,WAAYA,EAAYsB,MAAOA,OACxG,kBAAC8D,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAW,kBAAM,kBAAC,EAAD,CAAOzG,UAAWA,EAAWkB,WAAYA,EAAYsB,MAAOA,a,GAnCrFgB,IAAMkC,WCLvCgB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.7fa7ffb8.chunk.js","sourcesContent":["const styles = {\n  menu: {\n    padding: \"20px\",\n    display: 'inline-flex'\n  },\n  paragraph: {\n    margin: '5px'\n  }\n};\n\nexport default styles;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport styles from './Menu.styles';\n\nconst Menu = () => (\n    <div style={styles.menu}>\n        <p style={styles.paragraph}><Link className=\"btn btn-secondary\" to=\"/table\">Table</Link></p>\n        <p style={styles.paragraph}><Link className=\"btn btn-secondary\" to=\"/chart\">Chart</Link></p>\n    </div>\n);\n\nexport default Menu;\n","const styles = {\n  divStyle: {\n    maxWidth: '200px',\n    padding: '20px'\n  }\n}\n\nexport default styles;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './RiskLevelSelector.styles';\n\nconst RiskLevelSelector = (props) => {\n    const { minRiskLevel, maxRiskLevel, defaultRiskLevel, onChangeRiskLevel} = props;\n\n    const onChangeSelector = (event) => {\n        let riskLevel = parseInt(event.target.value, 10);\n        \n        onChangeRiskLevel(riskLevel);\n    };\n\n    const options = [];\n    for (let k = minRiskLevel; k<=maxRiskLevel; ++k) {\n    options.push(\n        <option key={k} value={k}>{k}</option>\n        );\n    }\n\n    return (\n        <div style={styles.divStyle}>\n            <label>Risk level:</label>\n            <select \n                className=\"form-control\" \n                onChange={onChangeSelector} \n                defaultValue={defaultRiskLevel}\n                id=\"riskSelector\"\n            >\n                {options}\n            </select>\n        </div>\n    );\n}\n\nRiskLevelSelector.defaultProps = {\n    minRiskLevel: 3,\n    maxRiskLevel: 25,\n    defaultRiskLevel: 3,\n    onChangeRiskLevel: () => {}\n};\n\nRiskLevelSelector.propTypes = {\n    minRiskLevel: PropTypes.number,\n    maxRiskLevel: PropTypes.number,\n    defaultRiskLevel: PropTypes.number,\n    onChangeRiskLevel: PropTypes.func\n};\n\nexport default RiskLevelSelector;\n","const styles = {\n  investmentInputContainer: {\n    padding: '20px',\n    width: '200px'\n  }\n};\n\nexport default styles;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './InvestmentInput.styles';\n\nconst InvestmentInput = (props) => {\n  const { defaultInvestment, onChangeInitialInvestment } = props;\n\n  const onChangeSelector = (event) => {\n    let investmentAmount = parseInt(event.target.value, 10);\n\n    onChangeInitialInvestment(investmentAmount);\n  };\n\n  return (\n    <div style={styles.investmentInputContainer}>\n      <label>Initial Investment:</label>\n      <input type=\"number\" value={defaultInvestment} className=\"form-control\" onChange={onChangeSelector}/>\n    </div>\n  );\n}\n\nInvestmentInput.defaultProps = {\n  defaultInvestment: 10000,\n  onChangeInitialInvestment: () => { }\n};\n\nInvestmentInput.propTypes = {\n  defaultInvestment: PropTypes.number,\n  onChangeInitialInvestment: PropTypes.func\n};\n\nexport default InvestmentInput;","function mapDate({ t, mu, sigma, fee, initialSum, monthlySum }) {\n    let yearlyReturn = mu - fee;\n    let monthlyReturn = yearlyReturn / 12;\n    let month = t * 12;\n\n    let median = initialSum * Math.exp(yearlyReturn * t) + monthlySum * Math.exp(monthlyReturn * (month - Math.floor(month))) * (Math.exp(monthlyReturn * Math.floor(month)) - 1.0) / (Math.exp(monthlyReturn) - 1.0);\n\n    return {\n        median: median,\n        upper95: Math.exp(Math.log(median) + Math.sqrt(t) * sigma * 1.645),\n        lower05: Math.exp(Math.log(median) - Math.sqrt(t) * sigma * 1.645)\n    };\n};\n\nexport default mapDate;\n","import mapDate from './mapDate';\n\nconst calculateTimeSeries = ({ years, mu, sigma, fee, initialSum, monthlySum }) => {\n\n  var series = [];\n  for (var l = 0; l <= 12 * years; ++l) {\n    series.push(mapDate({ t: l / 12, mu, sigma, fee, initialSum, monthlySum }));\n  }\n\n  let allSeries = {\n    median: [],\n    upper95: [],\n    lower05: []\n  };\n\n  for (var k = 0; k < series.length; k++) {\n    allSeries.median.push({ y: series[k].median, x: series[k].x });\n    allSeries.upper95.push({ y: series[k].upper95, x: series[k].x });\n    allSeries.lower05.push({ y: series[k].lower05, x: series[k].x });\n  }\n\n  return allSeries;\n};\n\nexport default calculateTimeSeries;","import calculateTimeSeries from '../utils/calculateTimeSeries';\n\nconst useTimeSeries = (riskLevel, initialSum, cones) => {\n  const { mu, sigma } = cones.length > 0 && cones.filter(cone => cone.riskLevel === riskLevel)[0];\n  const fee = 0.01;\n\n  const timeSeries = calculateTimeSeries({\n    mu,\n    sigma,\n    years: 10,\n    initialSum,\n    monthlySum: 200,\n    fee\n  });\n\n  const months = timeSeries.median.map((v, idx) => idx);\n  const labels = timeSeries.median.map((v, idx) => idx % 12 === 0 ? idx / 12 : '');\n  let dataGood = timeSeries.upper95.map(v => v.y);\n  let dataMedian = timeSeries.median.map(v => v.y);\n  const dataBad = timeSeries.lower05.map(v => v.y);\n\n  return {\n    months,\n    labels,\n    dataGood,\n    dataMedian,\n    dataBad\n  }\n}\n\nexport default useTimeSeries;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Table = (props) => {\n  const { tableColumns, tableRows} = props;\n\n  let tableHeader = React.createElement('tr', {},\n    tableColumns.map(\n      item => React.createElement('th', { key: item }, item),\n    )\n  );\n\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        {tableHeader}\n      </thead>\n      <tbody>\n        {tableRows}\n      </tbody>\n    </table>\n  );\n}\n\nTable.defaultProps = {\n  tableColumns: [],\n  tableRows: [],\n};\n\nTable.propTypes = {\n  tableColumns: PropTypes.array,\n  tableRows: PropTypes.array\n};\n\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useTimeSeries from '../hooks/useTimeSeries';\nimport Table from '../components/Table/Table';\n\nconst TableScreen = (props) => {\n    const {riskLevel, initialSum, cones} = props;\n    const { months, dataGood, dataMedian, dataBad } = useTimeSeries(riskLevel, initialSum, cones);\n\n    const tableColumns = ['month', 'good', 'median', 'bad'];\n    const tableRows = months && months.map((entry, index) => (\n        <tr key={index}>\n            <td>{entry}</td>\n            <td>{dataGood[index]}</td>\n            <td>{dataMedian[index]}</td>\n            <td>{dataBad[index]}</td>\n        </tr>\n    ));\n\n    return <Table tableColumns={tableColumns} tableRows={cones.length > 0 && tableRows} />;\n}\n\nTable.defaultProps = {\n    riskLevel: 3,\n    initialSum: 10000,\n    cones: []\n};\n\nTable.propTypes = {\n    riskLevel: PropTypes.number,\n    initialSum: PropTypes.number,\n    cones: PropTypes.array\n};\n\nexport default TableScreen;\n","import React from 'react';\nimport {Chart as ChartJs} from 'chart.js';\nimport useTimeSeries from '../hooks/useTimeSeries';\n\nclass ChartScreen extends React.Component {\n    componentDidMount() {\n        this.drawChart()\n    }\n\n    drawChart() {\n        const { riskLevel, initialSum, cones} = this.props;\n        const { labels, dataBad, dataMedian, dataGood } = useTimeSeries(riskLevel, initialSum, cones);\n\n        const data = {\n            datasets: [\n                {\n                    data: dataGood,\n                    label: 'Good performance',\n                    borderColor: 'rgba(100, 255, 100, 0.2)',\n                    fill: false,\n                    pointRadius: 0\n                },\n                {\n                    data: dataMedian,\n                    label: 'Median performance',\n                    borderColor: 'rgba(100, 100, 100, 0.2)',\n                    fill: false,\n                    pointRadius: 0\n                },\n                {\n                    data: dataBad,\n                    label: 'Bad performance',\n                    borderColor: 'rgba(255, 100, 100, 0.2)',\n                    fill: false,\n                    pointRadius: 0\n                }\n            ],\n            labels\n        };\n\n        const options = {\n            responsive: false,\n            scales: {\n                xAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Years'\n                    },\n                    gridLines: {\n                        drawOnChartArea: false\n                    },\n                }],\n                yAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Valuation (EUR)'\n                    }\n                }]\n            }\n        };\n\n        const config = {\n            type: 'line',\n            data,\n            options\n        };\n\n        const canvas = this.canvas;\n        const context = canvas.getContext(\"2d\");\n        new ChartJs(context, config);\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas\n                    ref={ref => this.canvas = ref}\n                    width={600}\n                    height={400}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ChartScreen;\n","import { HOST_URL, USE_LOCAL_DATA } from '../common/constants';\nimport jsonData from '../data/data.json';\n\nconst fetchData = async () => {\n  let responseData;\n  \n  if(USE_LOCAL_DATA){\n    responseData = jsonData.data;\n  } else {\n    const response = await fetch(HOST_URL);\n    responseData = await response.json();\n  }\n\n  return responseData;\n}\n\nexport default fetchData;\n","// export const HOST_URL = 'http://localhost:3000/api/cones';\nexport const HOST_URL = '';\nexport const USE_LOCAL_DATA = true;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Menu from './components/Menu/Menu';\nimport RiskLevelSelector from './components/RiskLevelSelector/Risk-level-selector';\nimport InvestmentInput from './components/InvestmentInput/InvestmentInput';\nimport TableScreen from './screens/TableScreen';\nimport Chart from './screens/ChartScreen';\nimport fetchData from './helpers/fetchData';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            riskLevel: 3,\n            initialSum: 10000,\n            cones: []\n        };\n        this.onChangeRiskLevel = this.onChangeRiskLevel.bind(this);\n        this.onChangeInitialInvestment = this.onChangeInitialInvestment.bind(this);\n    }\n\n    async componentDidMount(){\n        const cones = await fetchData();\n        this.setState({cones})\n    }\n\n    onChangeRiskLevel(riskLevel) {\n        this.setState({riskLevel});\n    }\n\n    onChangeInitialInvestment(initialSum) {\n        initialSum > 0 && this.setState({ initialSum });\n    }\n\n    render() {\n        const { riskLevel, initialSum, cones} = this.state;\n        return (\n            <Router>\n                <div>\n                    <Menu/>\n                    <InvestmentInput onChangeInitialInvestment={this.onChangeInitialInvestment} defaultInvestment={initialSum}/>\n                    <RiskLevelSelector onChangeRiskLevel={this.onChangeRiskLevel} defaultRiskLevel={riskLevel}/>\n                    <Route exact path=\"/\" component={() => <TableScreen riskLevel={riskLevel} initialSum={initialSum} cones={cones}/>} />\n                    <Route path=\"/table\" component={() => <TableScreen riskLevel={riskLevel} initialSum={initialSum} cones={cones}/>} />\n                    <Route path=\"/chart\" component={() => <Chart riskLevel={riskLevel} initialSum={initialSum} cones={cones}/>} />\n                </div>\n            </Router>\n        );\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}